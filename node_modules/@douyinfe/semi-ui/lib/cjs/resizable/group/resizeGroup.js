"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _foundation = require("@douyinfe/semi-foundation/lib/cjs/resizable/foundation");
var _constants = require("@douyinfe/semi-foundation/lib/cjs/resizable/constants");
var _baseComponent = _interopRequireDefault(require("../../_base/baseComponent"));
var _resizeContext = require("./resizeContext");
require("@douyinfe/semi-foundation/lib/cjs/resizable/resizable.css");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
const prefixCls = _constants.cssClasses.PREFIX;
class ResizeGroup extends _baseComponent.default {
  constructor(props) {
    super(props);
    this.itemRefs = [];
    this.itemMinMap = new Map();
    this.itemMaxMap = new Map();
    this.itemMinusMap = new Map();
    this.itemDefaultSizeList = [];
    this.itemResizeStart = new Map();
    this.itemResizing = new Map();
    this.itemResizeEnd = new Map();
    this.handlerRefs = [];
    this.registerEvent = () => {
      if (this.window) {
        this.window.addEventListener('mousemove', this.foundation.onResizing);
        this.window.addEventListener('mouseup', this.foundation.onResizeEnd);
        this.window.addEventListener('mouseleave', this.foundation.onResizeEnd);
      }
    };
    this.unregisterEvent = () => {
      if (this.window) {
        this.window.removeEventListener('mousemove', this.foundation.onResizing);
        this.window.removeEventListener('mouseup', this.foundation.onResizeEnd);
        this.window.removeEventListener('mouseleave', this.foundation.onResizeEnd);
      }
    };
    this.registerItem = (ref, min, max, defaultSize, onResizeStart, onChange, onResizeEnd) => {
      this.itemRefs.push(ref);
      let index = this.itemRefs.length - 1;
      this.itemMinMap.set(index, min);
      this.itemMaxMap.set(index, max);
      this.itemDefaultSizeList.push(defaultSize);
      this.itemResizeStart.set(index, onResizeStart);
      this.itemResizing.set(index, onChange);
      this.itemResizeEnd.set(index, onResizeEnd);
      return index;
    };
    this.registerHandler = ref => {
      this.handlerRefs.push(ref);
      return this.handlerRefs.length - 1;
    };
    this.getGroupSize = () => {
      return this.groupSize;
    };
    this.state = {
      isResizing: false,
      originalPosition: {
        x: 0,
        y: 0,
        lastItemSize: 0,
        nextItemSize: 0,
        lastOffset: 0,
        nextOffset: 0
      },
      backgroundStyle: {
        height: '100%',
        width: '100%',
        backgroundColor: 'rgba(0,0,0,0)',
        cursor: 'auto',
        opacity: 0,
        position: 'fixed',
        zIndex: 9999,
        top: '0',
        left: '0',
        bottom: '0',
        right: '0'
      },
      curHandler: null
    };
    this.groupRef = /*#__PURE__*/(0, _react.createRef)();
    this.foundation = new _foundation.ResizeGroupFoundation(this.adapter);
    this.contextValue = {
      direction: props.direction,
      registerItem: this.registerItem,
      registerHandler: this.registerHandler,
      notifyResizeStart: this.foundation.onResizeStart,
      getGroupSize: this.getGroupSize
    };
  }
  componentDidMount() {
    this.foundation.init();
  }
  componentDidUpdate(_prevProps) {}
  componentWillUnmount() {
    this.foundation.destroy();
  }
  get adapter() {
    return Object.assign(Object.assign({}, super.adapter), {
      getGroupRef: () => this.groupRef.current,
      getItem: id => this.itemRefs[id].current,
      getItemCount: () => this.itemRefs.length,
      getHandler: id => this.handlerRefs[id].current,
      getHandlerCount: () => this.handlerRefs.length,
      getItemMin: index => {
        return this.itemMinMap.get(index);
      },
      getItemMax: index => {
        return this.itemMaxMap.get(index);
      },
      getItemChange: index => {
        return this.itemResizing.get(index);
      },
      getItemEnd: index => {
        return this.itemResizeEnd.get(index);
      },
      getItemStart: index => {
        return this.itemResizeStart.get(index);
      },
      getItemDefaultSize: index => {
        return this.itemDefaultSizeList[index];
      },
      registerEvents: this.registerEvent,
      unregisterEvents: this.unregisterEvent
    });
  }
  get window() {
    var _a;
    return (_a = this.groupRef.current.ownerDocument.defaultView) !== null && _a !== void 0 ? _a : null;
  }
  render() {
    const _a = this.props,
      {
        children,
        direction,
        className
      } = _a,
      rest = __rest(_a, ["children", "direction", "className"]);
    return /*#__PURE__*/_react.default.createElement(_resizeContext.ResizeContext.Provider, {
      value: this.contextValue
    }, /*#__PURE__*/_react.default.createElement("div", Object.assign({
      style: {
        flexDirection: direction === 'vertical' ? 'column' : 'row'
      },
      ref: this.groupRef,
      className: (0, _classnames.default)(className, prefixCls + '-group')
    }, rest), this.state.isResizing && /*#__PURE__*/_react.default.createElement("div", {
      style: this.state.backgroundStyle
    }), children));
  }
}
ResizeGroup.propTypes = {};
ResizeGroup.defaultProps = {
  direction: 'horizontal'
};
ResizeGroup.contextType = _resizeContext.ResizeContext;
var _default = exports.default = ResizeGroup;